{"version":3,"sources":["components/Link.js","constants.js","components/LinkList.js","components/CreateLink.js","components/Header.js","components/Login.js","components/Search.js","components/App.js","serviceWorker.js","index.js"],"names":["VOTE_MUTATION","gql","Link","props","authToken","localStorage","getItem","useMutation","voteMutation","loading","error","className","index","onClick","variables","linkId","link","id","description","url","votes","length","postedBy","name","FEED_QUERY","NEW_LINKS_SUBSCRIPTION","NEW_VOTES_SUBSCRIPTION","LinkList","_updateCacheAfterVote","cache","createVote","isNewPage","location","pathname","includes","page","parseInt","match","params","skip","first","orderBy","data","readQuery","query","feed","links","find","writeQuery","history","useHistory","useQuery","subscribeToMore","message","document","updateQuery","prev","subscriptionData","newLink","Object","assign","count","__typename","_subscribeToNewLinks","_subscribeToNewVotes","linksToRender","rankedLinks","slice","sort","l1","l2","_getLinksToRender","pageIndex","map","key","updateStoreAfterVote","previousPage","push","nextPage","_nextPage","POST_MUTATION","CreateLink","useState","setDescription","setUrl","onCompleted","updatePostMutation","update","post","unshift","value","onChange","e","target","type","placeholder","withRouter","to","removeItem","SIGNUP_MUTATION","LOGIN_MUTATION","Login","login","setLogin","email","setEmail","password","setPassword","setName","_saveUserData","token","setItem","_confirm","a","signup","accessMutation","preventDefault","toggleAccess","FEED_SEARCH_QUERY","Search","setLinks","filter","setFilter","_executeSearch","client","result","App","exact","path","render","component","Boolean","window","hostname","httpLink","createHttpLink","uri","onError","console","log","authLink","setContext","_","headers","authorization","wsLink","WebSocketLink","options","reconnect","connectionParams","split","getMainDefinition","kind","operation","concat","ApolloClient","InMemoryCache","ReactDOM","ApolloProvider","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.cae9a8b7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { AUTH_TOKEN } from \"../constants\";\r\n//import { timeDifferenceForDate } from \"../utils\";\r\nimport { gql, useMutation } from \"@apollo/client\";\r\n\r\nconst VOTE_MUTATION = gql`\r\n  mutation VoteMutation($linkId: ID!) {\r\n    vote(linkId: $linkId) {\r\n      id\r\n      link {\r\n        id\r\n        votes {\r\n          id\r\n          user {\r\n            id\r\n          }\r\n        }\r\n      }\r\n      user {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst Link = (props) => {\r\n  const authToken = localStorage.getItem(AUTH_TOKEN);\r\n\r\n  const [voteMutation, { loading, error }] = useMutation(VOTE_MUTATION);\r\n  if (loading) return <p>loading votes...</p>;\r\n  if (error) return <p>An error occurred on votes mutation</p>;\r\n\r\n  return (\r\n    <div className=\"flex mt2 items-start\">\r\n      <div className=\"flex items-center\">\r\n        <span className=\"gray\">{props.index + 1}.</span>\r\n        {authToken && (\r\n          <div\r\n            className=\"ml1 gray f11\"\r\n            onClick={() =>\r\n              voteMutation({\r\n                variables: { linkId: props.link.id },\r\n                // update(cache, { data: { vote } }) {\r\n                //   console.log(cache, \"cache en update de Link- mutacion -> voteMutation\")\r\n                //   console.log(vote, \"vote en mutacion de Link , voteMutation\")\r\n                //   props.updateStoreAfterVote(cache, vote, props.link.id)\r\n                // }\r\n              })\r\n            }\r\n          >\r\n            ▲\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className=\"ml1\">\r\n        <div>\r\n          {props.link.description} ({props.link.url})\r\n        </div>\r\n        <div className=\"f6 lh-copy gray\">\r\n          {props.link.votes.length} votes | by{\" \"}\r\n          {props.link.postedBy ? props.link.postedBy.name : \"Unknown\"}{\" \"}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Link;\r\n","export const AUTH_TOKEN = \"auth-token\";\r\nexport const LINKS_PER_PAGE = 5;\r\n","import React from \"react\";\r\nimport Link from \"./Link\";\r\nimport { gql, useQuery } from \"@apollo/client\";\r\nimport { LINKS_PER_PAGE } from \"../constants\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\n//CORREGIR ----> EN EL BACKEND AGREGAR LOS CAMPOS first , skipi y orderBy (argumentos de paginacion para el query)\r\n// query FeedQuery($first: Int, $skip: Int, $orderBy: LinkOrderByInput) {\r\n//   feed(first: $first, skip: $skip, orderBy: $orderBy) {\r\n// como no estan en el SCHEMA cuando se hace el query manda un error :\r\n//{\"errors\":[{\"message\":\"Unknown argument \\\"first\\\" on field \\\"feed\\\" of type \\\"Query\\\".\",\"locations\":[{\"line\":2,\"column\":8}]},{\"message\":\"Cannot query field \\\"createdAt\\\" on type \\\"Link\\\".\",\"locations\":[{\"line\":5,\"column\":7}]\r\nexport const FEED_QUERY = gql`\r\n  query FeedQuery {\r\n    feed {\r\n      links {\r\n        id\r\n        # createdAt\r\n        # agregar en el backend el campo created at \r\n        url\r\n        description\r\n        postedBy {\r\n          id\r\n          name\r\n        }\r\n        votes {\r\n          id\r\n          user {\r\n            id\r\n          }\r\n        }\r\n      }\r\n      count\r\n    }\r\n  }\r\n`\r\n\r\nconst NEW_LINKS_SUBSCRIPTION = gql`\r\n  subscription {\r\n    newLink {\r\n      id\r\n      url\r\n      description\r\n      postedBy {\r\n        id\r\n        name\r\n      }\r\n      votes {\r\n        id\r\n        user {\r\n          id\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst NEW_VOTES_SUBSCRIPTION = gql`\r\n  subscription {\r\n    newVote {\r\n      id\r\n      link {\r\n        id\r\n        url\r\n        description\r\n        postedBy {\r\n          id\r\n          name\r\n        }\r\n        votes {\r\n          id\r\n          user {\r\n            id\r\n          }\r\n        }\r\n      }\r\n      user {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst LinkList = (props) => {\r\n  const _updateCacheAfterVote = (cache, createVote, linkId) => {\r\n    const isNewPage = props.location.pathname.includes(\"new\");\r\n    const page = parseInt(props.match.params.page, 10);\r\n\r\n    const skip = isNewPage ? (page - 1) * LINKS_PER_PAGE : 0;\r\n    const first = isNewPage ? LINKS_PER_PAGE : 100;\r\n    const orderBy = isNewPage ? \"createdAt_DESC\" : null;\r\n    const data = cache.readQuery({\r\n      query: FEED_QUERY,\r\n      variables: { first, skip, orderBy },\r\n    });\r\n    const votedLink = data.feed.links.find((link) => link.id === linkId);\r\n    votedLink.votes = createVote.link.votes;\r\n    cache.writeQuery({ query: FEED_QUERY, data });\r\n  };\r\n  let history = useHistory();\r\n  let _subscribeToNewLinks = (subscribeToMore) => {\r\n    subscribeToMore({\r\n      document: NEW_LINKS_SUBSCRIPTION,\r\n      updateQuery: (prev, { subscriptionData }) => {\r\n        if (!subscriptionData.data) return prev;\r\n        const newLink = subscriptionData.data.newLink;\r\n        const exists = prev.feed.links.find(({ id }) => id === newLink.id);\r\n        if (exists) return prev;\r\n\r\n        return Object.assign({}, prev, {\r\n          feed: {\r\n            links: [newLink, ...prev.feed.links],\r\n            count: prev.feed.links.length + 1,\r\n            __typename: prev.feed.__typename,\r\n          },\r\n        });\r\n      },\r\n    });\r\n  };\r\n\r\n  let _subscribeToNewVotes = (subscribeToMore) => {\r\n    subscribeToMore({\r\n      document: NEW_VOTES_SUBSCRIPTION,\r\n    });\r\n  };\r\n  // const _getQueryVariables = () => {\r\n  //   const isNewPage = props.location.pathname.includes(\"new\");\r\n  //   const page = parseInt(props.match.params.page, 10);\r\n\r\n  //   const skip = isNewPage ? (page - 1) * LINKS_PER_PAGE : 0;\r\n  //   const first = isNewPage ? LINKS_PER_PAGE : 100;\r\n  //   const orderBy = isNewPage ? \"createdAt_DESC\" : null;\r\n  //   return { first, skip, orderBy };\r\n  // };\r\n\r\n  const { loading, error, data, subscribeToMore } = useQuery(FEED_QUERY, {\r\n    //variables: _getQueryVariables(),\r\n    variables: {\r\n      skip: props.location.pathname.includes(\"new\")\r\n        ? (parseInt(props.match.params.page, 10) - 1) * LINKS_PER_PAGE\r\n        : 0,\r\n      first: props.location.pathname.includes(\"new\") ? LINKS_PER_PAGE : 100,\r\n      orderBy:props.location.pathname.includes(\"new\") ? \"createdAt_DESC\" : null\r\n    },\r\n  });\r\n  if (loading) return \"Loading...\";\r\n  if (error) return `Error! ${error.message}`;\r\n\r\n  _subscribeToNewLinks(subscribeToMore);\r\n  _subscribeToNewVotes(subscribeToMore);\r\n\r\n  let _getLinksToRender = (data) => {\r\n    const isNewPage = props.location.pathname.includes(\"new\");\r\n    if (isNewPage) {\r\n      return data.feed.links;\r\n    }\r\n    const rankedLinks = data.feed.links.slice();\r\n    rankedLinks.sort((l1, l2) => l2.votes.length - l1.votes.length);\r\n    return rankedLinks;\r\n  };\r\n  const linksToRender = _getLinksToRender(data);\r\n  const isNewPage = props.location.pathname.includes(\"new\");\r\n  const pageIndex = props.match.params.page\r\n    ? (props.match.params.page - 1) * LINKS_PER_PAGE\r\n    : 0;\r\n\r\n  let _nextPage = (data) => {\r\n    const page = parseInt(props.match.params.page, 10);\r\n    if (page <= data.feed.count / LINKS_PER_PAGE) {\r\n      const nextPage = page + 1;\r\n      history.push(`/new/${nextPage}`);\r\n    }\r\n  };\r\n\r\n  let _previousPage = () => {\r\n    const page = parseInt(props.match.params.page, 10);\r\n    if (page > 1) {\r\n      const previousPage = page - 1;\r\n      history.push(`/new/${previousPage}`);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      {linksToRender.map((link, index) => (\r\n        <Link\r\n          key={link.id}\r\n          link={link}\r\n          index={index + pageIndex}\r\n          updateStoreAfterVote={_updateCacheAfterVote}\r\n        />\r\n      ))}\r\n      {isNewPage && (\r\n        <div className=\"flex ml4 mv3 gray\">\r\n          <div className=\"pointer mr2\" onClick={_previousPage}>\r\n            Previous\r\n          </div>\r\n          <div className=\"pointer\" onClick={() => _nextPage(data)}>\r\n            Next\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default LinkList;\r\n","import React, { useState } from \"react\";\r\nimport { gql, useMutation } from \"@apollo/client\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { FEED_QUERY } from \"./LinkList\";\r\nimport { LINKS_PER_PAGE } from \"../constants\";\r\n\r\nconst POST_MUTATION = gql`\r\n  mutation PostMutation($description: String!, $url: String!) {\r\n    post(description: $description, url: $url) {\r\n      id\r\n      url\r\n      description\r\n    }\r\n  }\r\n`;\r\n\r\nconst CreateLink = () => {\r\n  let history = useHistory();\r\n  const [description, setDescription] = useState(\"\");\r\n  const [url, setUrl] = useState(\"\");\r\n  const [updatePostMutation, { loading, error }] = useMutation(POST_MUTATION, {\r\n    onCompleted({ updatePostMutation }) {\r\n      history.push(\"/new/1\");\r\n    },\r\n    update(cache, { data: { post } }) {\r\n      const first = LINKS_PER_PAGE;\r\n      const skip = 0;\r\n      const orderBy = \"createdAt_DESC\";\r\n      const data = cache.readQuery({\r\n        query: FEED_QUERY,\r\n        variables: { first, skip, orderBy },\r\n      });\r\n      data.feed.links.unshift(post);\r\n      cache.writeQuery({\r\n        query: FEED_QUERY,\r\n        data,\r\n        variables: { first, skip, orderBy },\r\n      });\r\n    },\r\n  });\r\n  if (loading) return <p>loading...</p>;\r\n  if (error) return <p>An error occurred</p>;\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"flex flex-column mt3\">\r\n        <input\r\n          className=\"mb2\"\r\n          value={description}\r\n          onChange={(e) => setDescription(e.target.value)}\r\n          type=\"text\"\r\n          placeholder=\"A description for the link\"\r\n        />\r\n        <input\r\n          className=\"mb2\"\r\n          value={url}\r\n          onChange={(e) => setUrl(e.target.value)}\r\n          type=\"text\"\r\n          placeholder=\"The URL for the link\"\r\n        />\r\n      </div>\r\n      <button\r\n        onClick={() =>\r\n          updatePostMutation({\r\n            variables: { description: description, url: url },\r\n          })\r\n        }\r\n      >\r\n        Submit\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\nexport default CreateLink;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { withRouter } from \"react-router\";\r\nimport { AUTH_TOKEN } from \"../constants\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Header = () => {\r\n  const authToken = localStorage.getItem(AUTH_TOKEN);\r\n  let history = useHistory();\r\n  return (\r\n    <div className=\"flex pa1 justify-between nowrap orange\">\r\n      <div className=\"flex flex-fixed black\">\r\n        <div className=\"fw7 mr1\">Hacker News</div>\r\n        <Link to=\"/\" className=\"ml1 no-underline black\">\r\n          new\r\n        </Link>\r\n        <div className=\"ml1\">|</div>\r\n        <Link to=\"/top\" className=\"ml1 no-underline black\">\r\n          top\r\n        </Link>\r\n        <div className=\"ml1\">|</div>\r\n        <Link to=\"/search\" className=\"ml1 no-underline black\">\r\n          search\r\n        </Link>\r\n        {authToken && (\r\n          <div className=\"flex\">\r\n            <div className=\"ml1\">|</div>\r\n            <Link to=\"/create\" className=\"ml1 no-underline black\">\r\n              submit\r\n            </Link>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className=\"flex flex-fixed\">\r\n        {authToken ? (\r\n          <div\r\n            className=\"ml1 pointer black\"\r\n            onClick={() => {\r\n              localStorage.removeItem(AUTH_TOKEN);\r\n              history.push(`/`);\r\n            }}\r\n          >\r\n            logout\r\n          </div>\r\n        ) : (\r\n          <Link to=\"/login\" className=\"ml1 no-underline black\">\r\n            login\r\n          </Link>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Header);\r\n","import React, { useState } from \"react\";\r\nimport { gql, useMutation } from \"@apollo/client\";\r\nimport { AUTH_TOKEN } from \"../constants\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst SIGNUP_MUTATION = gql`\r\n  mutation SignupMutation($email: String!, $password: String!, $name: String!) {\r\n    signup(email: $email, password: $password, name: $name) {\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\nconst LOGIN_MUTATION = gql`\r\n  mutation LoginMutation($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\nconst Login = () => {\r\n  let history = useHistory();\r\n\r\n  const [login, setLogin] = useState(true);\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n\r\n  const _saveUserData = (token) => {\r\n    localStorage.setItem(AUTH_TOKEN, token);\r\n  };\r\n\r\n  const _confirm = async (data) => {\r\n    const { token } = login ? data.login : data.signup;\r\n    _saveUserData(token);\r\n    history.push(`/`);\r\n  };\r\n\r\n  const [accessMutation, { loading, error }] = useMutation(\r\n    login ? LOGIN_MUTATION : SIGNUP_MUTATION,\r\n    {\r\n      onCompleted(data) {\r\n        _confirm(data);\r\n      },\r\n    }\r\n  );\r\n\r\n  if (loading) return <p>loading access...</p>;\r\n  if (error) return <p>An error occurred on access</p>;\r\n\r\n  const toggleAccess = (e) => {\r\n    e.preventDefault();\r\n    setLogin((login) => !login);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h4 className=\"mv3\">{login ? \"Login\" : \"Sign Up\"}</h4>\r\n      <div className=\"flex flex-column\">\r\n        {!login && (\r\n          <input\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n            type=\"text\"\r\n            placeholder=\"Your name\"\r\n          />\r\n        )}\r\n        <input\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          type=\"text\"\r\n          placeholder=\"Your email address\"\r\n        />\r\n        <input\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          type=\"password\"\r\n          placeholder=\"Choose a safe password\"\r\n        />\r\n      </div>\r\n      <div className=\"flex mt3\">\r\n        <div\r\n          className=\"pointer mr2 button\"\r\n          onClick={() =>\r\n            accessMutation({\r\n              variables: { email: email, password: password, name: name },\r\n            })\r\n          }\r\n        >\r\n          {login ? \"login\" : \"create account\"}\r\n        </div>\r\n        <div className=\"pointer button\" onClick={(e) => toggleAccess(e)}>\r\n          {login ? \"need to create an account?\" : \"already have an account?\"}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React, { useState } from \"react\";\r\nimport { gql } from \"@apollo/client\";\r\n//import { withApollo } from \"@apollo/react-hoc\";\r\nimport Link from \"./Link\";\r\nimport { client } from \"../index\";\r\n\r\n\r\nconst FEED_SEARCH_QUERY = gql`\r\n  query FeedSearchQuery($filter: String!) {\r\n    feed(filter: $filter) {\r\n      links {\r\n        id\r\n        url\r\n        description\r\n        postedBy {\r\n          id\r\n          name\r\n        }\r\n        votes {\r\n          id\r\n          user {\r\n            id\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst Search = (props) => {\r\n  const [links, setLinks] = useState([]);\r\n  const [filter, setFilter] = useState(\"\");\r\n\r\n    let _executeSearch = async () => {\r\n      const result = await client.query({\r\n        query: FEED_SEARCH_QUERY,\r\n        variables: { filter },\r\n      });\r\n      const links = result.data.feed.links;\r\n      setLinks(links);\r\n    };\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        Search\r\n        <input type=\"text\" onChange={(e) => setFilter(e.target.value)} />\r\n        <button onClick={() => _executeSearch()}>OK</button>\r\n      </div>\r\n      {links.map((link, index) => (\r\n        <Link key={link.id} link={link} index={index} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n//export default withApollo(Search);\r\n\r\nexport default Search;\r\n","import React from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport LinkList from \"./LinkList\";\nimport CreateLink from \"./CreateLink\";\nimport Header from \"./Header\";\nimport Login from \"./Login\";\nimport Search from \"./Search\";\n\nfunction App() {\n  return (\n    <div className=\"center w85\">\n      <Header />\n      <div className=\"ph3 pv1 background-gray\">\n        <Switch>\n        <Route exact path='/' render={() => <Redirect to='/new/1' />} />\n          <Route exact path='/create' component={CreateLink} />\n          <Route exact path='/login' component={Login} />\n          <Route exact path='/search' component={Search} />\n          <Route exact path='/top' component={LinkList} />\n          <Route exact path='/new/:page' component={LinkList} />\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { AUTH_TOKEN } from \"./constants\";\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// 1\nimport { getMainDefinition } from \"@apollo/client/utilities\";\nimport {\n  ApolloProvider,\n  ApolloClient,\n  createHttpLink,\n  InMemoryCache,\n  split,\n} from \"@apollo/client\";\n\n// 2\nconst GRAPHQL_ENDPOINT = \"https://backend-josue.herokuapp.com/\";\nconst GRAPHQL_WS_ENDPOINT = \"ws://backend-josue.herokuapp.com/\";\n\nconst httpLink = createHttpLink({\n  uri: GRAPHQL_ENDPOINT,\n  onError: (e) => {\n    console.log(e);\n  },\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(AUTH_TOKEN);\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n// 3\n\nconst wsLink = new WebSocketLink({\n  uri: GRAPHQL_WS_ENDPOINT,\n  options: {\n    reconnect: true,\n    connectionParams: {\n      authToken: localStorage.getItem(AUTH_TOKEN),\n    },\n  },\n});\n\nconst link = split(\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(query);\n    return kind === \"OperationDefinition\" && operation === \"subscription\";\n  },\n  wsLink,\n  authLink.concat(httpLink)\n);\n\nexport const client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n});\n\n// 4\nReactDOM.render(\n  <Router>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </Router>,\n  document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}